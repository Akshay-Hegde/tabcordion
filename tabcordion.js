// Generated by CoffeeScript 1.3.3

/*
- Currently only supports data-target on the tabs, not href
*/


(function() {
  var Tabcordion;

  $.fn.tabcordion = function(option) {
    return this.each(function() {
      var $this, data, options;
      $this = $(this);
      options = typeof option === 'object' && option;
      data = $this.data('tabcordion') || new Tabcordion(this, options);
      if (typeof option === 'string') {
        return data[option]();
      }
    });
  };

  $.fn.tabcordion.defaults = {
    resizeEl: null,
    tabs: {
      minWidth: 480,
      "class": 'tabbable',
      listClass: 'nav nav-tabs',
      itemClass: '',
      bodyClass: 'tab-pane fade'
    },
    accordion: {
      maxWidth: 480,
      "class": 'accordion',
      listClass: 'nav',
      itemClass: 'accordion-group',
      bodyClass: 'accordion-body collapse'
    },
    activeClass: 'active in'
  };

  Tabcordion = (function() {

    function Tabcordion(el, options) {
      var listClass,
        _this = this;
      this.$el = $(el);
      this.options = $.extend({}, $.fn.tabcordion.defaults, {
        resizeEl: this.$el
      }, options);
      this.$el.addClass(this.options.tabs["class"]).find('> .tab-content > *').addClass(this.options.tabs.bodyClass);
      this.$el.find('> ul > li > a').attr('data-toggle', 'tab');
      this.$el.data('tabcordion', this);
      if (listClass = this.$el.find('> ul').attr('class')) {
        this.options.tabs.listClass += ' ' + listClass;
      }
      $(window).resize(function(e) {
        return _this.onResize(e);
      });
      this.onResize();
    }

    Tabcordion.prototype.onResize = function() {
      var width;
      width = $(this.options.resizeEl).width();
      if (width < this.options.tabs.minWidth) {
        return this.accordion();
      } else if (width > this.options.accordion.maxWidth) {
        return this.tabs();
      }
    };

    Tabcordion.prototype.tabs = function() {
      var $contentContainer, $list, self;
      if (this.$el.hasClass(this.options.tabs["class"])) {
        return;
      }
      this.$el.removeClass(this.options.accordion["class"]).addClass(this.options.tabs["class"]);
      $list = this.$el.find('> ul').removeClass(this.options.accordion.listClass).addClass(this.options.tabs.listClass);
      $contentContainer = this.$el.find('.tab-content');
      self = this;
      return $list.children().removeClass(self.options.accordion.itemClass).addClass(self.options.tabs.itemClass).each(function() {
        var $content, $inner, $item, $link;
        $item = $(this);
        $link = $item.find('.accordion-heading a');
        $link.attr('data-toggle', 'tab');
        $content = $($link.attr('data-target'));
        $inner = $content.find('> .accordion-inner').remove();
        $content.append($inner.children());
        $item.children().remove().end().append($link);
        $contentContainer.append($content);
        self.switchContent($link, $content, self.options.accordion, self.options.tabs);
        return true;
      });
    };

    Tabcordion.prototype.accordion = function() {
      var $contentContainer, $items, $list, self;
      if (this.$el.hasClass(this.options.accordion["class"])) {
        return;
      }
      this.$el.removeClass(this.options.tabs["class"]).addClass(this.options.accordion["class"]);
      $list = this.$el.find('> ul').removeClass(this.options.tabs.listClass).addClass(this.options.accordion.listClass);
      $contentContainer = this.$el.find('.tab-content');
      self = this;
      $items = $list.children();
      return $items.removeClass(self.options.tabs.itemClass).addClass(self.options.accordion.itemClass).each(function() {
        var $content, $heading, $item, $link;
        $item = $(this);
        $link = $item.find('a');
        $content = $($link.attr('data-target'));
        $heading = $('<div class="accordion-heading" />').append($link);
        $content.append($('<div class="accordion-inner" />').append($content.children()));
        if (!$content.attr('id')) {
          $content.attr('id', Tabcordion.generateId('body'));
        }
        $link.addClass('accordion-toggle');
        $link.attr('data-toggle', 'collapse');
        $link.attr('data-target', '#' + $content.attr('id'));
        $link.data('parent', self.$el);
        $item.append($heading).append($content);
        self.switchContent($link, $content, self.options.tabs, self.options.accordion);
        return true;
      });
    };

    Tabcordion.prototype.switchContent = function($link, $content, from, to) {
      var isActive, switchToTab;
      switchToTab = to.bodyClass === this.options.tabs.bodyClass;
      isActive = $content.hasClass('active');
      $content.removeClass(from.bodyClass).addClass(to.bodyClass);
      if (isActive) {
        $link.addClass(this.options.activeClass);
        $content.addClass(this.options.activeClass);
      } else {
        $link.removeClass(this.options.activeClass);
        $content.removeClass(this.options.activeClass);
      }
      $content.collapse({
        parent: this.$el.find('> ul'),
        toggle: false
      });
      if (switchToTab) {
        $content.collapse('reset');
      } else {
        $content.height(isActive ? 'auto' : 0);
        $content.collapse(isActive ? 'show' : 'hide');
      }
      return isActive;
    };

    return Tabcordion;

  })();

  $.extend(Tabcordion, {
    idSuffix: 1,
    generateId: function(suffix) {
      var id;
      while (true) {
        id = "tabcordion-" + suffix + "-" + (Tabcordion.idSuffix++);
        if ($('#' + id).length === 0) {
          break;
        }
      }
      return id;
    }
  });

}).call(this);
